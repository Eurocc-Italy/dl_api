openapi: 3.0.3
info:
  title: DTaaS API
  description: "This API handles the communication between the virtual infrastructure\
    \ generated by the DTaaS codebase and the User. The goal is to allow to Upload,\
    \ Updates, Donwload and Processing of data from a Dual S3/PFS Datalake thanks\
    \ to interaction with a MongoDB. WARNING Asset is DECLARED but NEVER USED"
  version: 1.0.0
servers:
- url: http://localhost:8080/v1
paths:
  /upload:
    post:
      summary: --Upload files to datalake (S3) and add entries to MongoDB-- OR --Replace
        Files in datalake(S3) and keep correspondig MongoDB entry-- Two options avoid
        creation of duplicate entries in MongoDB
      operationId: upload_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_body'
      responses:
        "201":
          description: Upload Successful
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "400":
          description: Upload Failed
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /replace/{path}:
    put:
      summary: Replace an existing entry and its associated file in S3 for the given
        path in MongoDB
      operationId: replace_entry
      parameters:
      - name: path
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_body'
      responses:
        "200":
          description: Entry and file replaced successfully
        "404":
          description: Path not found in the database
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /update/{path}:
    patch:
      summary: Update metadata in MongoDB for a file given its path
      operationId: update_entry
      parameters:
      - name: path
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/update_path_body'
      responses:
        "200":
          description: Entry and optionally the file updated successfully
        "404":
          description: Path not found in the database
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /download/{id}:
    get:
      summary: Download an item (using item path) from the datalake
      operationId: download_id_get
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Download Successful
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                x-content-type: application/octet-stream
        "404":
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /query_and_process:
    post:
      summary: Query (sql in .txt) and Manipulate (file.py) datalake items
      operationId: query_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/query_and_process_body'
      responses:
        "200":
          description: Query and Manipulate Successful
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /delete/{file_path}:
    delete:
      summary: Delete a file in datalake (S3) and its MongoDB entry based on the given
        file_path
      operationId: delete_file
      parameters:
      - name: file_path
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: File and its database entry deleted successfully
        "400":
          description: Failed to delete file or its database entry
      x-openapi-router-controller: swagger_server.controllers.default_controller
components:
  schemas:
    Asset:
      type: object
      properties:
        area:
          type: number
          description: Area covered by the object in the image.
        bbox:
          type: array
          description: Bounding box coordinates.
          items:
            type: number
        caption:
          type: string
          description: Caption describing the image.
        captured:
          type: string
          description: Timestamp when the image was captured.
          format: date-time
        category:
          type: string
          description: Category description.
        category_id:
          type: integer
          description: Category identifier.
        height:
          type: integer
          description: Height of the image in pixels.
        id:
          type: integer
          description: Unique identifier for the asset.
        iscrowd:
          type: integer
          description: Flag indicating crowd presence (0 or 1).
        path:
          type: string
          description: File path for the asset.
        segmentation:
          type: array
          description: Pixel-level segmentation details.
          items:
            type: number
        width:
          type: integer
          description: Width of the image in pixels.
    query_and_process_body:
      required:
      - python_file
      - query_file
      type: object
      properties:
        query_file:
          type: string
          format: binary
        python_file:
          type: string
          format: binary
    upload_body:
      required:
      - file
      - json_data
      type: object
      properties:
        file:
          type: string
          format: binary
        json_data:
          type: string
          format: binary
    replace_path_body:
      type: object
      properties:
        metadata:
          type: string
          format: json
        file:
          type: string
          format: binary
    update_path_body:
      type: object
      properties:
        file:
          type: string
          format: binary