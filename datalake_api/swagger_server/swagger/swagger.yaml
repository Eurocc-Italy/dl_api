openapi: 3.0.3
info:
  title: DTaaS API
  description: This API handles the communication between the virtual infrastructure generated by the DTaaS codebase and the User. The goal is to allow to Upload, Update, Donwload and Process data from a Dual S3/PFS Datalake thanks to interaction with a MongoDB.
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
paths:
  /upload:
    post:
      summary: Upload files to datalake (S3) and add entries to MongoDB or replace files in datalake (S3) and keep corresponding MongoDB entry
      operationId: upload_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_body'
      responses:
        '201':
          description: Upload Successful
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        '400':
          description: Upload Failed - Bad Request or Incorrect Format
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        '401':
          description: Unauthorized - Invalid Token
        '403':
          description: Forbidden - Insufficient Permissions
        '409':
          description: Conflict - Duplicate Entry Detected
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /replace:
    put:
      summary: Replace an existing entry and its associated file in S3 for the given path in MongoDB
      operationId: replace_entry
      parameters:
        - name: path
          in: query
          required: true
          description: Path of the file in MongoDB to be replaced
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_body'
      responses:
        '200':
          description: Entry and file replaced successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Path not found in the database
        '422':
          description: Unprocessable Entity
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /update:
    patch:
      summary: Update metadata in MongoDB for a file given its path
      operationId: update_entry
      parameters:
        - name: path
          in: query
          required: true
          description: Path of the file whose metadata is to be updated
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/update_path_body'
      responses:
        '200':
          description: Entry and optionally the file updated successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Path not found in the database
        '422':
          description: Unprocessable Entity
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /download:
    get:
      summary: Download an item (using item path) from the datalake
      operationId: download_id_get
      parameters:
        - name: id
          in: query
          required: true
          description: Path of the item to be downloaded
          schema:
            type: string
      responses:
        '200':
          description: Download Successful
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                x-content-type: application/octet-stream
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /query_and_process:
    post:
      summary: Query (sql in .txt) and Manipulate (file.py) datalake items, with optional server and client configurations
      operationId: query_post
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/query_and_process_body'
      responses:
        '200':
          description: Query and Manipulate Successful
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        '400':
          description: Bad Request - Incorrect Format or Parameters
        '401':
          description: Unauthorized - Invalid Token
        '403':
          description: Forbidden - Insufficient Permissions
        '422':
          description: Unprocessable Entity - Query or Processing Error
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /delete:
    delete:
      summary: Delete a file in datalake (S3) and its MongoDB entry based on the given file_path
      operationId: delete_file
      parameters:
        - name: file_path
          in: query
          required: true
          description: Path of the file in the datalake and MongoDB to be deleted
          schema:
            type: string
      responses:
        '200':
          description: File and its database entry deleted successfully
        '400':
          description: Bad Request - Invalid file path or format
        '401':
          description: Unauthorized - Invalid Token
        '403':
          description: Forbidden - Insufficient Permissions
        '404':
          description: Not Found - File path does not exist
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /config:
    get:
      operationId: get_config
      summary: Retrieve Configuration
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/update_path_body'
        '400':
          description: Bad Request - Incorrect Format or Parameters
        '401':
          description: Unauthorized - Invalid Token
        '403':
          description: Forbidden - Insufficient Permissions
        '404':
          description: Configuration not found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    put:
      operationId: update_config
      summary: Update Configuration
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                new_config:
                  type: string
                  format: binary
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request - Incorrect Format or Parameters
        '401':
          description: Unauthorized - Invalid Token
        '403':
          description: Forbidden - Insufficient Permissions
      x-openapi-router-controller: swagger_server.controllers.default_controller
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: swagger_server.controllers.authorization_controller.decode_token
  schemas:
    Asset:
      type: object
      properties:
        area:
          type: number
          description: Area covered by the object in the image.
        bbox:
          type: array
          description: Bounding box coordinates.
          items:
            type: number
        caption:
          type: string
          description: Caption describing the image.
        captured:
          type: string
          description: Timestamp when the image was captured.
          format: date-time
        category:
          type: string
          description: Category description.
        category_id:
          type: integer
          description: Category identifier.
        height:
          type: integer
          description: Height of the image in pixels.
        id:
          type: integer
          description: Unique identifier for the asset.
        iscrowd:
          type: integer
          description: Flag indicating crowd presence (0 or 1).
        path:
          type: string
          description: File path for the asset.
        segmentation:
          type: array
          description: Pixel-level segmentation details.
          items:
            type: number
        width:
          type: integer
          description: Width of the image in pixels.
    query_and_process_body:
      required:
        - query_file
      type: object
      properties:
        query_file:
          type: string
          format: binary
        python_file:
          type: string
          format: binary
        config_json:
          type: string
          format: binary
    upload_body:
      required:
        - file
        - json_data
      type: object
      properties:
        file:
          type: string
          format: binary
        json_data:
          type: string
          format: binary
    replace_path_body:
      type: object
      properties:
        metadata:
          type: string
          format: json
        file:
          type: string
          format: binary
    update_path_body:
      type: object
      properties:
        file:
          type: string
          format: binary
security:
  - bearerAuth: []
Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-bucket-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt Bucket.Arn
              - !Sub ${Bucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  Function:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Function
      CodeUri: src/Function
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGET:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          BUCKET_BUCKET_NAME: !Ref Bucket
          BUCKET_BUCKET_ARN: !GetAtt Bucket.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${Bucket}
                - !Sub arn:${AWS::Partition}:s3:::${Bucket}/*
  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Function}