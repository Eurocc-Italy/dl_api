# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class HPCConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user: str=None, host: str=None, venv_path: str=None, ssh_key: str=None, partition: str=None, account: str=None, mail: str=None, walltime: str=None, nodes: int=None, ntasks_per_node: int=None):  # noqa: E501
        """HPCConfig - a model defined in Swagger

        :param user: The user of this HPCConfig.  # noqa: E501
        :type user: str
        :param host: The host of this HPCConfig.  # noqa: E501
        :type host: str
        :param venv_path: The venv_path of this HPCConfig.  # noqa: E501
        :type venv_path: str
        :param ssh_key: The ssh_key of this HPCConfig.  # noqa: E501
        :type ssh_key: str
        :param partition: The partition of this HPCConfig.  # noqa: E501
        :type partition: str
        :param account: The account of this HPCConfig.  # noqa: E501
        :type account: str
        :param mail: The mail of this HPCConfig.  # noqa: E501
        :type mail: str
        :param walltime: The walltime of this HPCConfig.  # noqa: E501
        :type walltime: str
        :param nodes: The nodes of this HPCConfig.  # noqa: E501
        :type nodes: int
        :param ntasks_per_node: The ntasks_per_node of this HPCConfig.  # noqa: E501
        :type ntasks_per_node: int
        """
        self.swagger_types = {
            'user': str,
            'host': str,
            'venv_path': str,
            'ssh_key': str,
            'partition': str,
            'account': str,
            'mail': str,
            'walltime': str,
            'nodes': int,
            'ntasks_per_node': int
        }

        self.attribute_map = {
            'user': 'user',
            'host': 'host',
            'venv_path': 'venv_path',
            'ssh_key': 'ssh_key',
            'partition': 'partition',
            'account': 'account',
            'mail': 'mail',
            'walltime': 'walltime',
            'nodes': 'nodes',
            'ntasks_per_node': 'ntasks_per_node'
        }
        self._user = user
        self._host = host
        self._venv_path = venv_path
        self._ssh_key = ssh_key
        self._partition = partition
        self._account = account
        self._mail = mail
        self._walltime = walltime
        self._nodes = nodes
        self._ntasks_per_node = ntasks_per_node

    @classmethod
    def from_dict(cls, dikt) -> 'HPCConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HPCConfig of this HPCConfig.  # noqa: E501
        :rtype: HPCConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user(self) -> str:
        """Gets the user of this HPCConfig.


        :return: The user of this HPCConfig.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this HPCConfig.


        :param user: The user of this HPCConfig.
        :type user: str
        """

        self._user = user

    @property
    def host(self) -> str:
        """Gets the host of this HPCConfig.


        :return: The host of this HPCConfig.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host: str):
        """Sets the host of this HPCConfig.


        :param host: The host of this HPCConfig.
        :type host: str
        """

        self._host = host

    @property
    def venv_path(self) -> str:
        """Gets the venv_path of this HPCConfig.


        :return: The venv_path of this HPCConfig.
        :rtype: str
        """
        return self._venv_path

    @venv_path.setter
    def venv_path(self, venv_path: str):
        """Sets the venv_path of this HPCConfig.


        :param venv_path: The venv_path of this HPCConfig.
        :type venv_path: str
        """

        self._venv_path = venv_path

    @property
    def ssh_key(self) -> str:
        """Gets the ssh_key of this HPCConfig.


        :return: The ssh_key of this HPCConfig.
        :rtype: str
        """
        return self._ssh_key

    @ssh_key.setter
    def ssh_key(self, ssh_key: str):
        """Sets the ssh_key of this HPCConfig.


        :param ssh_key: The ssh_key of this HPCConfig.
        :type ssh_key: str
        """

        self._ssh_key = ssh_key

    @property
    def partition(self) -> str:
        """Gets the partition of this HPCConfig.


        :return: The partition of this HPCConfig.
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition: str):
        """Sets the partition of this HPCConfig.


        :param partition: The partition of this HPCConfig.
        :type partition: str
        """

        self._partition = partition

    @property
    def account(self) -> str:
        """Gets the account of this HPCConfig.


        :return: The account of this HPCConfig.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account: str):
        """Sets the account of this HPCConfig.


        :param account: The account of this HPCConfig.
        :type account: str
        """

        self._account = account

    @property
    def mail(self) -> str:
        """Gets the mail of this HPCConfig.


        :return: The mail of this HPCConfig.
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail: str):
        """Sets the mail of this HPCConfig.


        :param mail: The mail of this HPCConfig.
        :type mail: str
        """

        self._mail = mail

    @property
    def walltime(self) -> str:
        """Gets the walltime of this HPCConfig.


        :return: The walltime of this HPCConfig.
        :rtype: str
        """
        return self._walltime

    @walltime.setter
    def walltime(self, walltime: str):
        """Sets the walltime of this HPCConfig.


        :param walltime: The walltime of this HPCConfig.
        :type walltime: str
        """

        self._walltime = walltime

    @property
    def nodes(self) -> int:
        """Gets the nodes of this HPCConfig.


        :return: The nodes of this HPCConfig.
        :rtype: int
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes: int):
        """Sets the nodes of this HPCConfig.


        :param nodes: The nodes of this HPCConfig.
        :type nodes: int
        """

        self._nodes = nodes

    @property
    def ntasks_per_node(self) -> int:
        """Gets the ntasks_per_node of this HPCConfig.


        :return: The ntasks_per_node of this HPCConfig.
        :rtype: int
        """
        return self._ntasks_per_node

    @ntasks_per_node.setter
    def ntasks_per_node(self, ntasks_per_node: int):
        """Sets the ntasks_per_node of this HPCConfig.


        :param ntasks_per_node: The ntasks_per_node of this HPCConfig.
        :type ntasks_per_node: int
        """

        self._ntasks_per_node = ntasks_per_node
