# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Asset(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, area: float=None, bbox: List[float]=None, caption: str=None, captured: datetime=None, category: str=None, category_id: int=None, height: int=None, id: int=None, iscrowd: int=None, path: str=None, segmentation: List[float]=None, width: int=None):  # noqa: E501
        """Asset - a model defined in Swagger

        :param area: The area of this Asset.  # noqa: E501
        :type area: float
        :param bbox: The bbox of this Asset.  # noqa: E501
        :type bbox: List[float]
        :param caption: The caption of this Asset.  # noqa: E501
        :type caption: str
        :param captured: The captured of this Asset.  # noqa: E501
        :type captured: datetime
        :param category: The category of this Asset.  # noqa: E501
        :type category: str
        :param category_id: The category_id of this Asset.  # noqa: E501
        :type category_id: int
        :param height: The height of this Asset.  # noqa: E501
        :type height: int
        :param id: The id of this Asset.  # noqa: E501
        :type id: int
        :param iscrowd: The iscrowd of this Asset.  # noqa: E501
        :type iscrowd: int
        :param path: The path of this Asset.  # noqa: E501
        :type path: str
        :param segmentation: The segmentation of this Asset.  # noqa: E501
        :type segmentation: List[float]
        :param width: The width of this Asset.  # noqa: E501
        :type width: int
        """
        self.swagger_types = {
            'area': float,
            'bbox': List[float],
            'caption': str,
            'captured': datetime,
            'category': str,
            'category_id': int,
            'height': int,
            'id': int,
            'iscrowd': int,
            'path': str,
            'segmentation': List[float],
            'width': int
        }

        self.attribute_map = {
            'area': 'area',
            'bbox': 'bbox',
            'caption': 'caption',
            'captured': 'captured',
            'category': 'category',
            'category_id': 'category_id',
            'height': 'height',
            'id': 'id',
            'iscrowd': 'iscrowd',
            'path': 'path',
            'segmentation': 'segmentation',
            'width': 'width'
        }
        self._area = area
        self._bbox = bbox
        self._caption = caption
        self._captured = captured
        self._category = category
        self._category_id = category_id
        self._height = height
        self._id = id
        self._iscrowd = iscrowd
        self._path = path
        self._segmentation = segmentation
        self._width = width

    @classmethod
    def from_dict(cls, dikt) -> 'Asset':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Asset of this Asset.  # noqa: E501
        :rtype: Asset
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area(self) -> float:
        """Gets the area of this Asset.

        Area covered by the object in the image.  # noqa: E501

        :return: The area of this Asset.
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area: float):
        """Sets the area of this Asset.

        Area covered by the object in the image.  # noqa: E501

        :param area: The area of this Asset.
        :type area: float
        """

        self._area = area

    @property
    def bbox(self) -> List[float]:
        """Gets the bbox of this Asset.

        Bounding box coordinates.  # noqa: E501

        :return: The bbox of this Asset.
        :rtype: List[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox: List[float]):
        """Sets the bbox of this Asset.

        Bounding box coordinates.  # noqa: E501

        :param bbox: The bbox of this Asset.
        :type bbox: List[float]
        """

        self._bbox = bbox

    @property
    def caption(self) -> str:
        """Gets the caption of this Asset.

        Caption describing the image.  # noqa: E501

        :return: The caption of this Asset.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption: str):
        """Sets the caption of this Asset.

        Caption describing the image.  # noqa: E501

        :param caption: The caption of this Asset.
        :type caption: str
        """

        self._caption = caption

    @property
    def captured(self) -> datetime:
        """Gets the captured of this Asset.

        Timestamp when the image was captured.  # noqa: E501

        :return: The captured of this Asset.
        :rtype: datetime
        """
        return self._captured

    @captured.setter
    def captured(self, captured: datetime):
        """Sets the captured of this Asset.

        Timestamp when the image was captured.  # noqa: E501

        :param captured: The captured of this Asset.
        :type captured: datetime
        """

        self._captured = captured

    @property
    def category(self) -> str:
        """Gets the category of this Asset.

        Category description.  # noqa: E501

        :return: The category of this Asset.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this Asset.

        Category description.  # noqa: E501

        :param category: The category of this Asset.
        :type category: str
        """

        self._category = category

    @property
    def category_id(self) -> int:
        """Gets the category_id of this Asset.

        Category identifier.  # noqa: E501

        :return: The category_id of this Asset.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id: int):
        """Sets the category_id of this Asset.

        Category identifier.  # noqa: E501

        :param category_id: The category_id of this Asset.
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def height(self) -> int:
        """Gets the height of this Asset.

        Height of the image in pixels.  # noqa: E501

        :return: The height of this Asset.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height: int):
        """Sets the height of this Asset.

        Height of the image in pixels.  # noqa: E501

        :param height: The height of this Asset.
        :type height: int
        """

        self._height = height

    @property
    def id(self) -> int:
        """Gets the id of this Asset.

        Unique identifier for the asset.  # noqa: E501

        :return: The id of this Asset.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Asset.

        Unique identifier for the asset.  # noqa: E501

        :param id: The id of this Asset.
        :type id: int
        """

        self._id = id

    @property
    def iscrowd(self) -> int:
        """Gets the iscrowd of this Asset.

        Flag indicating crowd presence (0 or 1).  # noqa: E501

        :return: The iscrowd of this Asset.
        :rtype: int
        """
        return self._iscrowd

    @iscrowd.setter
    def iscrowd(self, iscrowd: int):
        """Sets the iscrowd of this Asset.

        Flag indicating crowd presence (0 or 1).  # noqa: E501

        :param iscrowd: The iscrowd of this Asset.
        :type iscrowd: int
        """

        self._iscrowd = iscrowd

    @property
    def path(self) -> str:
        """Gets the path of this Asset.

        File path for the asset.  # noqa: E501

        :return: The path of this Asset.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this Asset.

        File path for the asset.  # noqa: E501

        :param path: The path of this Asset.
        :type path: str
        """

        self._path = path

    @property
    def segmentation(self) -> List[float]:
        """Gets the segmentation of this Asset.

        Pixel-level segmentation details.  # noqa: E501

        :return: The segmentation of this Asset.
        :rtype: List[float]
        """
        return self._segmentation

    @segmentation.setter
    def segmentation(self, segmentation: List[float]):
        """Sets the segmentation of this Asset.

        Pixel-level segmentation details.  # noqa: E501

        :param segmentation: The segmentation of this Asset.
        :type segmentation: List[float]
        """

        self._segmentation = segmentation

    @property
    def width(self) -> int:
        """Gets the width of this Asset.

        Width of the image in pixels.  # noqa: E501

        :return: The width of this Asset.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width: int):
        """Sets the width of this Asset.

        Width of the image in pixels.  # noqa: E501

        :param width: The width of this Asset.
        :type width: int
        """

        self._width = width
